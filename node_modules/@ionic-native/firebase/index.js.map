{"version":3,"sources":["../../../src/@ionic-native/plugins/firebase/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @beta\n * @name Firebase\n * @description\n * This plugin brings push notifications, analytics, event tracking, crash reporting and more from Google Firebase to your Cordova project! Android and iOS supported (including iOS 10).\n *\n * @usage\n * ```typescript\n * import { Firebase } from '@ionic-native/firebase';\n *\n * constructor(private firebase: Firebase) { }\n *\n * ...\n *\n * this.firebase.getToken()\n *   .then(token => console.log(`The token is ${token}`)) // save the token server-side and use it to push notifications to this device\n *   .catch(error => console.error('Error getting token', error));\n *\n * this.firebase.onTokenRefresh()\n *   .subscribe((token: string) => console.log(`Got a new token ${token}`));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Firebase',\n  plugin: 'cordova-plugin-firebase',\n  pluginRef: 'FirebasePlugin',\n  repo: 'https://github.com/arnesson/cordova-plugin-firebase',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Firebase extends IonicNativePlugin {\n\n  /**\n   * Get the device token\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getToken(): Promise<any> { return; }\n\n  /**\n   * Get notified when a token is refreshed\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<any> { return; }\n\n  /**\n   * Get notified when the user opens a notification\n   * @return {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  onNotificationOpen(): Observable<any> { return; }\n\n  /**\n   * Grant permission to receive push notifications\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  grantPermission(): Promise<any> { return; }\n\n  /**\n * Check permission to receive push notifications\n * @return {Promise<{isEnabled: boolean}>}\n */\n  @Cordova()\n  hasPermission(): Promise<{isEnabled: boolean}> { return; }\n\n  /**\n   * Set icon badge number. Set to 0 to clear the badge.\n   * @param badgeNumber {number}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setBadgeNumber(badgeNumber: number): Promise<any> { return; }\n\n  /**\n   * Get icon badge number\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  getBadgeNumber(): Promise<any> { return; }\n\n  /**\n   * Subscribe to a topic\n   * @param topic {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  subscribe(topic: string): Promise<any> { return; }\n\n  /**\n   * Unsubscribe from a topic\n   * @param topic {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  unsubscribe(topic: string): Promise<any> { return; }\n\n  /**\n   * Unregister from firebase, used to stop receiving push notifications.\n   * Call this when you logout user from your app.\n   */\n  @Cordova()\n  unregister(): Promise<any> { return; }\n\n  /**\n   * Log an event using Analytics\n   * @param type {string}\n   * @param data {Object}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logEvent(type: string, data: any): Promise<any> { return; }\n\n  /**\n   * Log an Error using FirebaseCrash\n   * @param message {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  logError(message: string): Promise<any> { return; }\n\n  /**\n   * Set the name of the current screen in Analytics\n   * @param name {string} Screen name\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setScreenName(name: string): Promise<any> { return; }\n\n  /**\n   * Set a user id for use in Analytics\n   * @param userId {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserId(userId: string): Promise<any> { return; }\n\n  /**\n   * Set a user property for use in Analytics\n   * @param name {string}\n   * @param value {string}\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  setUserProperty(name: string, value: string): Promise<any> { return; }\n\n  /**\n   * Fetch Remote Config parameter values for your app\n   * @param cacheExpirationSeconds\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  fetch(cacheExpirationSeconds?: number): Promise<any> { return; }\n\n  /**\n   * Activate the Remote Config fetched config\n   * @return {Promise<any>}\n   */\n  @Cordova()\n  activateFetched(): Promise<any> { return; }\n\n  /**\n   * Retrieve a Remote Config value\n   * @param key {string}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  getValue(key: string, namespace?: string): Promise<any> { return; }\n\n  /**\n   * Retrieve a Remote Config byte array\n   * @param key {string}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  getByteArray(key: string, namespace?: string): Promise<any> { return; }\n\n  /**\n   * Get the current state of the FirebaseRemoteConfig singleton object\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getInfo(): Promise<any> { return; }\n\n  /**\n   * Change the settings for the FirebaseRemoteConfig object's operations\n   * @param settings {Object}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  setConfigSettings(settings: any): Promise<any> { return; }\n\n  /**\n   * Set defaults in the Remote Config\n   * @param defaults {Object}\n   * @param namespace {string}\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    successIndex: 2,\n    errorIndex: 3\n  })\n  setDefaults(defaults: any, namespace: string): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}